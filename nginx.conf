# HTTP server - redirects all traffic to HTTPS
server {
    listen 80;
    server_name foodlink.shop www.foodlink.shop;
    
    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# # HTTPS server - main application
# server {
#     listen 443 ssl http2;
#     server_name foodlink.shop www.foodlink.shop;
    
#     # SSL Certificate paths (Let's Encrypt)
#     ssl_certificate /etc/letsencrypt/live/foodlink.shop/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/foodlink.shop/privkey.pem;

#     # SSL Security settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#         # Optional but recommended
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    
#     # Frontend - serve React app
#     location / {
#         proxy_pass http://frontend:80;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#     }
    
#     # Backend API
#     location /api {
#         proxy_pass http://backend:3003;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#     }
# }